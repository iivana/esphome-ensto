esphome:
  name: esphome-ensto
  platform: ESP32
  #board: esp32dev
  board: esp32doit-devkit-v1

# Enable logging
logger:
  logs:
    esp32_ble_tracker: INFO

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:

# Add webserver on port 80
#web_server:
#  port: 80

esp32_ble_tracker:
  scan_parameters: 
    active: false
  on_ble_advertise:
    - mac_address: !secret ensto1_mac
      then:
        - lambda: |-
            ESP_LOGI("ble_adv", "New BLE device");
            ESP_LOGI("ble_adv", "  address: %s", x.address_str().c_str());
            ESP_LOGI("ble_adv", "  Advertised manufacturer data:");
            auto man_datas = x.get_manufacturer_datas();
            for (auto man_data : man_datas) {
                ESP_LOGI("ble_adv", "    - %s (length %i)", man_data.uuid.to_string().c_str(), man_data.data.size());
                if (man_data.uuid.get_uuid().uuid.uuid16 != 0x2806) {
                  continue;
                }
                auto data = man_data.data;
                ESP_LOGI("ble_adv", "    - %s", &data[0]);
                if (data.size() < 3) {
                    continue;
                }
                std::string data_str = reinterpret_cast<const char *>(data.data() + 2);
                auto semi_pos = data_str.find_first_of(';');
                if (semi_pos == std::string::npos || semi_pos > data_str.length() - 1) {
                    continue;
                }
                id(ensto1_is_pairing) = data_str[semi_pos + 1] == '1';
                ESP_LOGI("ble_adv", "    - is pairing = %s", id(ensto1_is_pairing) ? "true" : "false");
            }
    
globals:
  - id: ensto1_factory_reset_id
    type: uint32_t
    restore_value: yes
    initial_value: '0'
  - id: ensto1_is_pairing
    type: bool
    restore_value: no
# internal state machine states: 
# 0 = disconnected, don't try to read any characteristics
# 1 = read factory reset ID while device is in pairing mode
# 2 = write factory reset ID back to device. Write just received ID back during pairing or old one when not pairing.
# 3 = connected, free to read characteristics
  - id: ensto1_state
    type: uint32_t
    initial_value: '0' 
# interval count to filter what characteristics to read on each interval
  - id: ensto1_interval_count
    type: uint32_t
    initial_value: '0'

ble_client:
  - mac_address: !secret ensto1_mac
    id: ensto1
    on_connect:
      then:
        - lambda: |-
            ESP_LOGI("ensto1 on_connect", "Connected to Ensto");

            esphome::ble_client::BLEClient* client = id(ensto1);
            esp_ble_set_encryption(client->remote_bda, ESP_BLE_SEC_ENCRYPT_MITM);
            if (id(ensto1_is_pairing)) {
                ESP_LOGI("ensto1 on_connect", "Connected to Ensto1 (pairing) -> read factory reset ID");
                id(ensto1_state) = 1; // read new factory reset ID
                return;
            }
            uint32_t key = id(ensto1_factory_reset_id);
            if (key == 0) {
              ESP_LOGW("ensto1 on_connect", "Factory reset ID is not set. Must be paired first.");
              return;
            }
            ESP_LOGI("ensto1 on_connect", "Connected to Ensto1 -> write factory reset ID");
            id(ensto1_state) = 2; // write old factory reset id
            
    on_disconnect:
      then:
        - lambda: |-
            ESP_LOGI("ensto1 on_disconnect", "Disconnected from Ensto1");
            id(ensto1_connection_state).publish_state(false);
            id(ensto1_state) = 0; // disconnected
            
binary_sensor:
  - platform: template
    id: ensto1_connection_state
    name: "Ensto1 Connection status"
  - platform: template
    id: ensto1_relay_state
    name: "Ensto1 Relay state"
  - platform: template
    id: ensto1_boost_status
    name: "Ensto1 Boost status"
  - platform: template
    id: ensto1_adaptive_temperature_control_status
    name: "Ensto1 Adaptive temperature control status"

sensor:
# Real-time information (temperatures, is heating relay active)
  - platform: ble_client
    ble_client_id: ensto1
    id: ensto1_real_time_indication_characteristic
    internal: true
    service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
    characteristic_uuid: 66AD3E6B-3135-4ADA-BB2B-8B22916B21D4
    notify: false
    update_interval: never
    lambda: |-
      ESP_LOGI("ble_client.receive", "ensto1 real-time values received with %d bytes", x.size());
      if (x.size() < 20) return NAN;
      auto target_temp = (x[1] + 256 * x[2]) / 10.0f;
      auto room_temp = (int16_t)((x[4] + 256 * x[5])) / 10.0f;
      auto floor_temp = (int16_t)((x[6] + 256 * x[7])) / 10.0f;
      if (target_temp == 0 && room_temp == 0 && floor_temp == 0) {
          // security key was not written correctly -> don't update
          ESP_LOGW("ble_client.receive", "ensto1 real-time values are zero");
          return NAN;
      }
      static bool is_first = true;
      // statics to update values to home-assistant only when they change
      static auto last_target_temp = target_temp;
      if (is_first || last_target_temp != target_temp) {
          last_target_temp = target_temp;
          id(ensto1_target_temperature).publish_state(target_temp);
      }
      static auto last_room_temp = room_temp;
      if (is_first || last_room_temp != room_temp) {
          last_room_temp = room_temp;
          id(ensto1_room_temperature).publish_state(room_temp);
      }
      static auto last_floor_temp = floor_temp;
      if (is_first || last_floor_temp != floor_temp) {
          last_floor_temp = floor_temp;
          id(ensto1_floor_temperature).publish_state(floor_temp);
      }
      auto relay_state = x[8] != 0;
      static auto last_relay_state = relay_state;
      if (is_first || last_relay_state != relay_state) {
          last_relay_state = relay_state;
          id(ensto1_relay_state).publish_state(relay_state);
      }
      uint8_t heating_mode = x[14];
      static uint8_t last_heating_mode = heating_mode;
      if (is_first || last_heating_mode != heating_mode) {
          last_heating_mode = heating_mode;
          id(ensto1_heating_mode).publish_state(heating_mode);
      }
      is_first = false;
      return NAN;

  - platform: template
    name: "Ensto1 Target temperature"
    id: ensto1_target_temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    state_class: measurement
    device_class: temperature
  - platform: template
    name: "Ensto1 Room temperature"
    id: ensto1_room_temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    state_class: measurement
    device_class: temperature
  - platform: template
    name: "Ensto1 Floor temperature"
    id: ensto1_floor_temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    state_class: measurement
    device_class: temperature
  - platform: template
    name: "Ensto1 Heating mode"
    id: ensto1_heating_mode
    unit_of_measurement: "mode"

# Adaptive temperature control status
  - platform: ble_client
    ble_client_id: ensto1
    id: ensto1_adaptive_temp_control_characteristic
    internal: true
    service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
    characteristic_uuid: c2dc85e9-47bf-4968-9562-d2e1980ed4e4
    notify: false
    update_interval: never
    lambda: |-
      ESP_LOGI("ble_client.receive", "Adaptive temp control characteristic received with %d bytes", x.size());
      if (x.size() < 1) return NAN;
      static bool is_first = true;
      bool is_adaptive = x[0];
      static bool last_is_adaptive = is_adaptive;
      if (is_first || last_is_adaptive != is_adaptive) {
          is_first = false;
          last_is_adaptive = is_adaptive;
          id(ensto1_adaptive_temperature_control_status).publish_state(is_adaptive);
      }
      return NAN;

# Temperature calibration
  - platform: ble_client
    ble_client_id: ensto1
    id: ensto1_temp_calibration_characteristic
    internal: true
    service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
    characteristic_uuid: 1eca4351-b264-4db6-9c59-af4341d6ce69
    notify: false
    update_interval: never
    lambda: |-
      ESP_LOGI("ble_client.receive", "Temp calibration characteristic received with %d bytes", x.size());
      if (x.size() < 2) return NAN;
      auto temp_cal = (int16_t)(256 * x[1] + x[0]);
      static auto last_temp_cal = temp_cal;
      static bool is_first = true;
      if (is_first || last_temp_cal != temp_cal) {
          last_temp_cal = temp_cal;
          id(ensto1_temp_calibration).publish_state(temp_cal / 10.0f);
      }
      is_first = false;
      return NAN;
  - platform: template
    name: "Ensto1 Temperature calibration value"
    id: ensto1_temp_calibration
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    state_class: measurement
    device_class: temperature

# Temperature boost
  - platform: ble_client
    ble_client_id: ensto1
    id: ensto1_boost_characteristic
    internal: true
    service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
    characteristic_uuid: ca3c0685-b708-4cd4-a049-5badd10469e7
    notify: false
    update_interval: never
    lambda: |-
      ESP_LOGI("ble_client.receive", "Boost characteristic received with %d bytes", x.size());
      if (x.size() < 8) return NAN;
      auto is_boost_on = x[0] != 0;
      static bool is_first = true;
      static auto last_is_boost_on = is_boost_on;
      if (is_first || last_is_boost_on != is_boost_on) {
          last_is_boost_on = is_boost_on;
          id(ensto1_boost_status).publish_state(is_boost_on);
      }
      auto boost_offset = (int16_t)(256 * x[2] + x[1]);
      static auto last_boost_offset = boost_offset;
      if (is_first || last_boost_offset != boost_offset) {
          last_boost_offset = boost_offset;
          id(ensto1_temp_boost_offset).publish_state(boost_offset / 100.0f);
      }
      auto boost_minutes_left = (uint16_t)(256 * x[7] + x[6]);
      static auto last_boost_minutes_left = boost_minutes_left;
      if (is_first || last_boost_minutes_left != boost_minutes_left) {
          last_boost_minutes_left = boost_minutes_left;
          id(ensto1_temp_boost_minutes_left).publish_state(boost_minutes_left);
      }
      is_first = false;
      return NAN;
  - platform: template
    name: "Ensto1 Temperature boost offset"
    id: ensto1_temp_boost_offset
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    state_class: measurement
    device_class: temperature
  - platform: template
    name: "Ensto1 Temperature boost minutes left"
    id: ensto1_temp_boost_minutes_left
    unit_of_measurement: "minutes"

# Power consumption
  - platform: ble_client
    ble_client_id: ensto1
    id: ensto1_power_consumption_characteristic
    internal: true
    service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
    characteristic_uuid: c1686f28-fa1b-4791-9eca-35523fb3597e
    notify: false
    update_interval: never
    lambda: |-
      // format (uint8_t): <header><current hour><current date><current month><current year> following 25x(<hour delta from current><consumption ratio>)
      // ESP_LOGI("ble_client.receive", "Power consumption characteristic received with %d bytes: %s", x.size(), format_hex(x.data(), x.size()).c_str());
      if (x.size() < 9) return NAN;
      uint32_t power = id(ensto1_max_heating_power).get_state();
      auto price = id(ensto1_price_per_kwh).get_state();
      if (x[5] == 0) { // current hour (consumption so far)
          id(ensto1_power_consumption_ratio_current_hour).publish_state(x[6]);
          id(ensto1_power_consumption_current_hour).publish_state(x[6] * power / 1000.0 / 100.0);
          id(ensto1_price_current_hour).publish_state(x[6] * power / 1000.0 / 100.0 * price);
      }
      if (x[7] == 1) { // previous hour
          id(ensto1_power_consumption_ratio_previous_hour).publish_state(x[8]);
          id(ensto1_power_consumption_previous_hour).publish_state(x[8] * power / 1000.0 / 100.0);
          id(ensto1_price_previous_hour).publish_state(x[8] * power / 1000.0 / 100.0 * price);
      }
      return NAN;
  - platform: template
    name: "Ensto1 Power consumption ratio current hour"
    id: ensto1_power_consumption_ratio_current_hour
    accuracy_decimals: 0
    unit_of_measurement: "%"
    device_class: power_factor
    state_class: total_increasing
  - platform: template
    name: "Ensto1 Power consumption ratio previous hour"
    id: ensto1_power_consumption_ratio_previous_hour
    accuracy_decimals: 0
    unit_of_measurement: "%"
    device_class: power_factor
    state_class: total
  - platform: template
    name: "Ensto1 Power consumption current hour (kWh)"
    id: ensto1_power_consumption_current_hour
    accuracy_decimals: 3
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
  - platform: template
    name: "Ensto1 Power consumption previous hour (kWh)"
    id: ensto1_power_consumption_previous_hour
    accuracy_decimals: 3
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total
  - platform: template
    name: "Ensto1 Electricity price current hour"
    id: ensto1_price_current_hour
    accuracy_decimals: 5
    unit_of_measurement: "€" # hard-coded unit
    state_class: total_increasing
  - platform: template
    name: "Ensto1 Electricity price previous hour"
    id: ensto1_price_previous_hour
    accuracy_decimals: 5
    unit_of_measurement: "€" # hard-coded unit
    state_class: total

# Max heating power (set manually from App)
  - platform: ble_client
    ble_client_id: ensto1
    id: ensto1_heating_power_characteristic
    internal: true
    service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
    characteristic_uuid: 53b7bf87-6cf0-4790-839a-e72d3afbec44
    notify: false
    update_interval: never
    lambda: |-
      // format (all single byte): <header><current hour><current date><current month><current year> following 25x(<hour delta from current><consumption ratio>)
      ESP_LOGI("ble_client.receive", "Heating Power characteristic received with %d bytes: %s", x.size(), format_hex(x.data(), x.size()).c_str());
      if (x.size() < 2) return NAN;
      id(ensto1_max_heating_power).publish_state((int16_t)(256 * x[1] + x[0]));
      return NAN;
  - platform: template
    name: "Ensto1 Max Heating Power"
    id: ensto1_max_heating_power
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"

# LED brightness
  - platform: ble_client
    ble_client_id: ensto1
    id: ensto1_led_brightness_characteristic
    internal: true
    service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
    characteristic_uuid: 0bee30ff-ed95-4747-bf1b-01a60f5ff4fc
    notify: false
    update_interval: never
    lambda: |-
      if (x.size() < 3) return NAN;
      auto red = x[0];
      auto green = x[1];
      auto blue = x[2];
      ESP_LOGI("ble_client.receive", "LED brightness characteristic received: red=%d, green=%d, blue=%d", red, green, blue);
      id(ensto1_red_led_brightness).publish_state(red);
      id(ensto1_green_led_brightness).publish_state(green);
      id(ensto1_blue_led_brightness).publish_state(blue);
      return NAN;
  - platform: template
    name: "Ensto1 Red LED brightness"
    id: ensto1_red_led_brightness
    accuracy_decimals: 0
    unit_of_measurement: "%"
  - platform: template
    name: "Ensto1 Green LED brightness"
    id: ensto1_green_led_brightness
    accuracy_decimals: 0
    unit_of_measurement: "%"
  - platform: template
    name: "Ensto1 Blue LED brightness"
    id: ensto1_blue_led_brightness
    accuracy_decimals: 0
    unit_of_measurement: "%"

# Energy unit price (set manually from App)
  - platform: ble_client
    ble_client_id: ensto1
    id: ensto1_energy_unit_characteristic
    internal: true
    service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
    characteristic_uuid: ccf1fe7b-d928-45b1-abba-7a915f2f0c64
    notify: false
    update_interval: never
    lambda: |-
      if (x.size() < 4) return NAN;
      auto currency = x[0];
      auto price = (int16_t)(256 * x[3] + x[2]) / 100.0f;
      std::string currency_str;
      if (currency == 1) currency_str = "€";
      if (currency == 2) currency_str = "SEK";
      if (currency == 3) currency_str = "NOK";
      if (currency == 4) currency_str = "RUB";
      if (currency == 5) currency_str = "$";
      ESP_LOGI("ble_client.receive", "Energy unit characteristic received: currency=%d (%s), price=%f", currency, currency_str.c_str(), price);
      id(ensto1_currency_id).publish_state(currency);
      id(ensto1_price_per_kwh).publish_state(price);
      return NAN;
  - platform: template
    name: "Ensto1 Currency ID"
    id: ensto1_currency_id
    accuracy_decimals: 0
  - platform: template
    name: "Ensto1 Price per kWh"
    id: ensto1_price_per_kwh
    accuracy_decimals: 2

# Factory reset ID
  - platform: ble_client
    ble_client_id: ensto1
    id: ensto1_security_key_characteristic
    internal: true
    service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
    characteristic_uuid: f366dddb-ebe2-43ee-83c0-472ded74c8fa
    notify: false
    update_interval: never
    lambda: |-
      if (x.size() < 4) return NAN;

      uint32_t key = x[0] | x[1] << 8 | x[2] << 16 | x[3] << 24;
      if (key == 0) {
          ESP_LOGW("ensto1_pairing", "Reading Ensto1 factory reset ID failed");
          return NAN; // couldn't get pairing key
      }
      ESP_LOGI("ensto1_pairing", "key read = %02x%02x%02x%02x", x[0], x[1], x[2], x[3]);
      id(ensto1_factory_reset_id) = key;
      ESP_LOGI("ensto1_pairing", "Factory reset ID read -> write factory reset ID");
      id(ensto1_state) = 2; // write key back
      return NAN;

# state machine loop. Do actions every 5 second
interval:
  - interval: 5s
    then: 
      - lambda: |-
          id(ensto1_interval_count) = id(ensto1_interval_count) + 1;
      # 1 = pairing, read factory reset ID
      - if:
          condition:
            lambda: |-
              return id(ensto1_state) == 1;
          then:
            - lambda: |-
                id(ensto1_security_key_characteristic).update();
      # 2 = write factory reset ID (if it is not zero)
      - if:
          condition:
            lambda: |-
              uint32_t key = id(ensto1_factory_reset_id);
              return id(ensto1_state) == 2 && key != 0;
          then:
            - ble_client.ble_write:
                id: ensto1
                service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
                characteristic_uuid: f366dddb-ebe2-43ee-83c0-472ded74c8fa
                value: !lambda |-
                    uint32_t key = id(ensto1_factory_reset_id);
                    uint8_t newVal[4] = {
                        (uint8_t)(key & 0xff),
                        (uint8_t)((key >> 8) & 0xff),
                        (uint8_t)((key >> 16) & 0xff),
                        (uint8_t)((key >> 24) & 0xff),
                    };
                    ESP_LOGI("ensto1 write key", "%02x%02x%02x%02x", newVal[0], newVal[1], newVal[2], newVal[3]);
                    ESP_LOGI("ensto1 write key", "Factory reset ID written -> Connected");
                    id(ensto1_connection_state).publish_state(true);
                    id(ensto1_state) = 3; // connected
                    return {newVal[0], newVal[1], newVal[2], newVal[3]};
      # 3 = connected, read characteristics once in a while
      - if:
          condition:
            lambda: |-
                return id(ensto1_state) == 3;
          then:
            - lambda: |-
                // Ensto disconnects if some characteristic is not read for 30 seconds
                if (id(ensto1_interval_count) % 2 == 0) { // every 10 seconds
                    id(ensto1_real_time_indication_characteristic).update();
                }
                if (id(ensto1_interval_count) % 6 == 0) { // every 30 seconds
                    id(ensto1_adaptive_temp_control_characteristic).update();
                    id(ensto1_temp_calibration_characteristic).update();
                    id(ensto1_boost_characteristic).update();
                    id(ensto1_heating_power_characteristic).update();                    
                    id(ensto1_power_consumption_characteristic).update();
                    id(ensto1_energy_unit_characteristic).update();
                    id(ensto1_led_brightness_characteristic).update();
                }
          

# Enable Home Assistant API
api:
  services:
# Temperature calibration value has range of -5.0..5.0C written as -50..50 to Ensto.
    - service: set_ensto1_temperature_calibration
      variables:
        temperature_offset: float
      then:
        - if:
            condition:
              lambda: |-
                  return id(ensto1_connection_state);
            then:
              - ble_client.ble_write:
                  id: ensto1
                  service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
                  characteristic_uuid: 1eca4351-b264-4db6-9c59-af4341d6ce69
                  value: !lambda |-
                      int16_t value = std::round(temperature_offset * 10);
                      // ensure it is within limits
                      value = std::max<int16_t>(-50, std::min<int16_t>(value, 50));
                      ESP_LOGI("ble_client.write_action", "New calibration value set to %d", value);
                      return {(uint8_t)(value & 0xff), (uint8_t)((value >> 8) & 0xff)};
# Temperature boost offset has valid range of -20.0..20.0C written as -2000..2000 to Ensto
# Boost length is given as minutes. According to specification the value is uint8_t, so valid range is 0..255.
    - service: set_ensto1_temperature_boost_offset
      variables:
        boost_offset: float
        length_minutes: int
      then:
        - if:
            condition:
              lambda: |-
                  return id(ensto1_connection_state);
            then:
              - ble_client.ble_write:
                  id: ensto1
                  service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
                  characteristic_uuid: ca3c0685-b708-4cd4-a049-5badd10469e7
                  value: !lambda |-
                      int16_t value = std::round(boost_offset * 100);
                      value = std::max<int16_t>(-2000, std::min<int16_t>(value, 2000));
                      uint16_t minutes = std::max(0, std::min(length_minutes, 255));
                      ESP_LOGI("ble_client.write_action", "New boost offset set to %d for %u minutes", value, minutes);
                      return {
                          1, // enable
                          (uint8_t)(value & 0xff), (uint8_t)((value >> 8) & 0xff), // int16_t offset
                          0, // boost offset percentage (not used)
                          (uint8_t)(minutes & 0xff), (uint8_t)((minutes >> 8) & 0xff) // uint16_t boost time set point in minutes
                      };
# Max heating power of the device (e.g. 1000W).
    - service: set_ensto1_max_power
      variables:
        max_power: int
      then:
        - if:
            condition:
              lambda: |-
                  return id(ensto1_connection_state);
            then:
              - ble_client.ble_write:
                  id: ensto1
                  service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
                  characteristic_uuid: 53b7bf87-6cf0-4790-839a-e72d3afbec44
                  value: !lambda |-
                      // ensure it is within limits
                      uint16_t value = std::max<int32_t>(0, std::min<int32_t>(max_power, std::numeric_limits<uint16_t>::max()));
                      ESP_LOGI("ble_client.write_action", "New max heating power value set to %d", value);
                      return {(uint8_t)(value & 0xff), (uint8_t)((value >> 8) & 0xff)};
# Price of electricity per kWh (e.g. 0.09€). Energy unit IDs: use_previous=0, EUR=1, SEK=2, NOK=3, RUB=4, USD=5
    - service: set_ensto1_kwh_price
      variables:
        energy_unit_id: int
        price_per_kwh: float
      then:
        - if:
            condition:
              lambda: |-
                  return id(ensto1_connection_state) && (energy_unit_id >= 0 && energy_unit_id <= 5);
            then:
              - ble_client.ble_write:
                  id: ensto1
                  service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
                  characteristic_uuid: ccf1fe7b-d928-45b1-abba-7a915f2f0c64
                  value: !lambda |-
                      auto unit_id = energy_unit_id;
                      if (unit_id == 0) unit_id = id(ensto1_currency_id).get_state();
                      uint16_t value = std::max<uint16_t>(0, std::min<uint16_t>(price_per_kwh * 100, std::numeric_limits<uint16_t>::max()));
                      ESP_LOGI("ble_client.write_action", "New price of electricity per kWh set to %f (unit ID=%d)", price_per_kwh, unit_id);
                      return {(uint8_t)(unit_id & 0xff), 0, (uint8_t)(value & 0xff), (uint8_t)((value >> 8) & 0xff)};
# Led brightness percentage (0-100)
    - service: set_ensto1_led_brightness_percentage
      variables:
        red: int
        green: int
        blue: int
      then:
        - if:
            condition:
              lambda: |-
                  return id(ensto1_connection_state);
            then:
              - ble_client.ble_write:
                  id: ensto1
                  service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
                  characteristic_uuid: 0bee30ff-ed95-4747-bf1b-01a60f5ff4fc
                  value: !lambda |-
                      ESP_LOGI("ble_client.write_action", "New LED brightness values set to: red=%d, green=%d, blue=%d", red, green, blue);
                      return {(uint8_t)(std::max(0, std::min(red, 100)) & 0xff), 
                              (uint8_t)(std::max(0, std::min(green, 100)) & 0xff),
                              (uint8_t)(std::max(0, std::min(blue, 100)) & 0xff)};
