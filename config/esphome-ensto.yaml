esphome:
  name: esphome-ensto
  platform: ESP32
  #board: esp32dev
  board: esp32doit-devkit-v1

# Enable logging
logger:
  logs:
    esp32_ble_tracker: DEBUG

# Enable Home Assistant API
api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

captive_portal:
# Add webserver on port 80
web_server:
  port: 80

esp32_ble_tracker:
  scan_parameters: 
    active: false
  on_ble_advertise:
    - mac_address: !secret ensto1_mac
      then:
        - lambda: |-
            ESP_LOGI("ble_adv", "New BLE device");
            ESP_LOGI("ble_adv", "  address: %s", x.address_str().c_str());
            ESP_LOGI("ble_adv", "  Advertised manufacturer data:");
            auto man_datas = x.get_manufacturer_datas();
            for (auto man_data : man_datas) {
                ESP_LOGI("ble_adv", "    - %s (length %i)", man_data.uuid.to_string().c_str(), man_data.data.size());
                if (man_data.uuid.get_uuid().uuid.uuid16 != 0x2806) {
                  continue;
                }
                auto data = man_data.data;
                ESP_LOGI("ble_adv", "    - %s", &data[0]);
                if (data.size() < 3) {
                    continue;
                }
                std::string data_str = reinterpret_cast<const char *>(data.data() + 2);
                auto semi_pos = data_str.find_first_of(';');
                if (semi_pos == std::string::npos || semi_pos > data_str.length() - 1) {
                    continue;
                }
                id(ensto1_is_pairing) = data_str[semi_pos + 1] == '1';
                ESP_LOGI("ble_adv", "    - is pairing = %s", id(ensto1_is_pairing) ? "true" : "false");
            }
    
globals:
  - id: ensto1_factory_reset_id
    type: uint32_t
    restore_value: yes
    initial_value: '0'
  - id: ensto1_is_pairing
    type: bool
    restore_value: no

ble_client:
  - mac_address: !secret ensto1_mac
    id: ensto1
    on_connect:
      then:
        - lambda: |-
            ESP_LOGI("ble_client_lambda", "Connected to Ensto");

            esphome::ble_client::BLEClient* client = id(ensto1);
            esp_ble_set_encryption(client->remote_bda, ESP_BLE_SEC_ENCRYPT_MITM);
            if (id(ensto1_is_pairing)) {
                return; // handle in below lambda
            }
            uint32_t key = id(ensto1_factory_reset_id);
            if (key == 0) {
              ESP_LOGW("ble_client_lambda", "Factory reset ID is not set. Must be paired first.");
              return;
            }
            uint8_t newVal[4] = {
                (uint8_t)(key & 0xff),
                (uint8_t)((key >> 8) & 0xff),
                (uint8_t)((key >> 16) & 0xff),
                (uint8_t)((key >> 24) & 0xff),
            };
            ESP_LOG_BUFFER_HEX("ble_client_lambda", newVal, sizeof(newVal));
            ESP_LOGI("ble_client_lambda", "key = %02x%02x%02x%02x", newVal[0], newVal[1], newVal[2], newVal[3]);
            int status = esp_ble_gattc_write_char(
              client->gattc_if,
              client->conn_id,
              0x4a,
              sizeof(newVal),
              newVal,
              ESP_GATT_WRITE_TYPE_RSP,
              ESP_GATT_AUTH_REQ_NONE
            );

            if (status) {
              ESP_LOGW("ble_client_lambda", "Error sending write value to Ensto1, status=%d", status);
            } else {
              ESP_LOGI("ble_client_lambda", "Ensto1 key written, status=%d", status);
            }
            id(ensto1_connection_state).publish_state(status == 0);

        - delay: 5s
        - lambda: |-
            if (!id(ensto1_is_pairing)) {
                if (id(ensto1_connection_state)) {
                    // Ensto disconnects if some characteristic is not read for 30 seconds
                    id(ensto1_real_time_indication_characteristic).set_update_interval(15000);
                    id(ensto1_real_time_indication_characteristic).call_setup();
                    id(ensto1_temp_calibration_characteristic).set_update_interval(60000);
                    id(ensto1_temp_calibration_characteristic).call_setup();
                    id(ensto1_boost_characteristic).set_update_interval(60000);
                    id(ensto1_boost_characteristic).call_setup();
                }
            } else {
                // in pairing mode. Read factory reset ID
                id(ensto1_security_key_characteristic).set_update_interval(5000);
                id(ensto1_security_key_characteristic).call_setup();
            }
            
    on_disconnect:
      then:
        - lambda: |-
            ESP_LOGI("ble_client_lambda", "Disconnected from Ensto1");
            id(ensto1_connection_state).publish_state(false);
            // stop updating
            id(ensto1_security_key_characteristic).set_update_interval(-1);
            id(ensto1_security_key_characteristic).call_setup();
            id(ensto1_real_time_indication_characteristic).set_update_interval(-1);
            id(ensto1_real_time_indication_characteristic).call_setup();
            id(ensto1_temp_calibration_characteristic).set_update_interval(-1);
            id(ensto1_temp_calibration_characteristic).call_setup();
            id(ensto1_boost_characteristic).set_update_interval(-1);
            id(ensto1_boost_characteristic).call_setup();
            
binary_sensor:
  - platform: template
    id: ensto1_connection_state
    name: "Ensto1 Connection status"
  - platform: template
    id: ensto1_relay_state
    name: "Ensto1 Relay state"
  - platform: template
    id: ensto1_boost_status
    name: "Ensto1 Boost status"

sensor:
# Real-time information (temperatures, is heating relay active)
  - platform: ble_client
    ble_client_id: ensto1
    id: ensto1_real_time_indication_characteristic
    internal: true
    service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
    characteristic_uuid: 66AD3E6B-3135-4ADA-BB2B-8B22916B21D4
    notify: false
    update_interval: never
    lambda: |-
      ESP_LOGI("ble_client.receive", "ensto1 real-time values received with %d bytes", x.size());
      if (x.size() < 20) return NAN;
      auto target_temp = (x[1] + 256 * x[2]) / 10.0f;
      auto room_temp = (int16_t)((x[4] + 256 * x[5])) / 10.0f;
      if (target_temp == 0 && room_temp == 0) {
          // security key was not written correctly -> don't update
          ESP_LOGW("ble_client.receive", "ensto1 real-time values are zero");
          return NAN;
      }
      auto relay_state = x[8] != 0;
      // statics to update values to home-assistant only when they change
      static auto last_target_temp = -100.0f;
      static auto last_room_temp = -100.0f;
      static auto last_relay_state = false;
      if (last_target_temp != target_temp || last_room_temp != room_temp) {
          last_target_temp = target_temp;
          last_room_temp = room_temp;
          id(ensto1_target_temperature).publish_state(target_temp);
          id(ensto1_room_temperature).publish_state(room_temp);
      }
      if (last_relay_state != relay_state) {
          last_relay_state = relay_state;
          id(ensto1_relay_state).publish_state(relay_state);
      }
      return NAN;
  - platform: template
    name: "Ensto1 Target temperature"
    id: ensto1_target_temperature
    unit_of_measurement: "째C"
    accuracy_decimals: 1
    state_class: measurement
    device_class: temperature
  - platform: template
    name: "Ensto1 Room temperature"
    id: ensto1_room_temperature
    unit_of_measurement: "째C"
    accuracy_decimals: 1
    state_class: measurement
    device_class: temperature

# Temperature calibration
  - platform: ble_client
    ble_client_id: ensto1
    id: ensto1_temp_calibration_characteristic
    internal: true
    service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
    characteristic_uuid: 1eca4351-b264-4db6-9c59-af4341d6ce69
    notify: false
    update_interval: never
    lambda: |-
      ESP_LOGI("ble_client.receive", "Temp calibration characteristic received with %d bytes", x.size());
      if (x.size() < 2) return NAN;
      auto temp_cal = (int16_t)(256 * x[1] + x[0]);
      static auto last_temp_cal = int16_t(-100);
      if (last_temp_cal != temp_cal) {
          last_temp_cal = temp_cal;
          id(ensto1_temp_calibration).publish_state(temp_cal / 10.0f);
      }
      return NAN;
  - platform: template
    name: "Ensto1 Temperature calibration value"
    id: ensto1_temp_calibration
    unit_of_measurement: "째C"
    accuracy_decimals: 1
    state_class: measurement
    device_class: temperature

# Temperature boost
  - platform: ble_client
    ble_client_id: ensto1
    id: ensto1_boost_characteristic
    internal: true
    service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
    characteristic_uuid: ca3c0685-b708-4cd4-a049-5badd10469e7
    notify: false
    update_interval: never
    lambda: |-
      ESP_LOGI("ble_client.receive", "Boost characteristic received with %d bytes", x.size());
      if (x.size() < 8) return NAN;
      auto is_boost_on = x[0] != 0;
      static auto last_is_boost_on = false;
      if (last_is_boost_on != is_boost_on) {
          last_is_boost_on = is_boost_on;
          id(ensto1_boost_status).publish_state(is_boost_on);
      }
      auto boost_offset = (int16_t)(256 * x[2] + x[1]);
      static auto last_boost_offset = int16_t(-9999);
      if (last_boost_offset != boost_offset) {
          last_boost_offset = boost_offset;
          id(ensto1_temp_boost_offset).publish_state(boost_offset / 100.0f);
      }
      auto boost_minutes_left = (uint16_t)(256 * x[7] + x[6]);
      static auto last_boost_minutes_left = uint16_t(-1);
      if (last_boost_minutes_left != boost_minutes_left) {
          last_boost_minutes_left = boost_minutes_left;
          id(ensto1_temp_boost_minutes_left).publish_state(boost_minutes_left);
      }
      return NAN;
  - platform: template
    name: "Ensto1 Temperature boost offset"
    id: ensto1_temp_boost_offset
    unit_of_measurement: "째C"
    accuracy_decimals: 2
    state_class: measurement
    device_class: temperature
  - platform: template
    name: "Ensto1 Temperature boost minutes left"
    id: ensto1_temp_boost_minutes_left
    unit_of_measurement: "minutes"

  - platform: ble_client
    ble_client_id: ensto1
    id: ensto1_security_key_characteristic
    internal: true
    service_uuid: F49CEFD5-209B-4531-99BD-89FE2909931A
    characteristic_uuid: f366dddb-ebe2-43ee-83c0-472ded74c8fa
    notify: false
    update_interval: never
    lambda: |-
      if (x.size() < 4) return NAN;

      uint32_t key = x[0] | x[1] << 8 | x[2] << 16 | x[3] << 24;
      if (key == 0) {
          ESP_LOGW("ble_client.ensto1_pairing", "Reading Ensto1 factory reset ID failed");
          return NAN; // couldn't get pairing key
      }
      uint8_t buf[] = {x[0], x[1], x[2], x[3]};
      // write it back
      esphome::ble_client::BLEClient* client = id(ensto1);
      if (!client) return NAN;
      int status = esp_ble_gattc_write_char(
          client->gattc_if,
          client->conn_id,
          0x4a,
          sizeof(buf),
          buf,
          ESP_GATT_WRITE_TYPE_RSP,
          ESP_GATT_AUTH_REQ_NONE
      );
      
      if (status != 0){
          ESP_LOGW("ble_client.ensto1_pairing", "Writing Ensto1 key back failed, status=%d", status);
          return NAN;
      }
      id(ensto1_factory_reset_id) = key;
      id(ensto1_security_key_characteristic).set_update_interval(-1); // stop updating
      id(ensto1_security_key_characteristic).call_setup();
      id(ensto1_connection_state).publish_state(true);
      // Ensto disconnects if some characteristic is not read for 30 seconds
      id(ensto1_real_time_indication_characteristic).set_update_interval(15000);
      id(ensto1_real_time_indication_characteristic).call_setup();
      id(ensto1_temp_calibration_characteristic).set_update_interval(60000);
      id(ensto1_temp_calibration_characteristic).call_setup();
      id(ensto1_boost_characteristic).set_update_interval(60000);
      id(ensto1_boost_characteristic).call_setup();
      return NAN;

# There might be easier way to do this.
# Taking calibration value as fan speed percentage (float: 0.1..1.0).
# Zero value is handled as uninitialized and not written.
# Scaling 0.1..1.0 to temperature value -4.9..5.0 which is written as -49..50 to Ensto.
output:
  - platform: template
    id: ensto1_temperature_calibration_set
    type: float
    write_action:
      - if:
          condition:
            lambda: return true;
          then:
            - lambda: |-
                if (!id(ensto1_connection_state)) {
                    return;
                }
                if (state < 0.01f) {
                    return; // skip uninitialized zero value from Home-assistant when it is restarted etc.
                }
                esphome::ble_client::BLEClient* client = id(ensto1);
                if (!client) {
                    ESP_LOGW("ble_client.write_action", "Ensto1 BLE Client doesn't exist");
                    return;
                }
                // convert state from 0.1..1 to -49..50
                int16_t value = (int16_t)((state * 10.0f - 5.0f) * 10 + 0.5f);
                // ensure it is within limits
                value = std::max(int16_t(-50), std::min(value, int16_t(50)));
                ESP_LOGI("ble_client.write_action", "New calibration value set to %d", value);
                uint8_t buf[] = {(uint8_t)(value & 0xff), (uint8_t)((value >> 8) & 0xff)};
                int status = esp_ble_gattc_write_char(
                    client->gattc_if,
                    client->conn_id,
                    0x39, //characteristic: 1eca4351-b264-4db6-9c59-af4341d6ce69
                    sizeof(buf),
                    buf,
                    ESP_GATT_WRITE_TYPE_RSP,
                    ESP_GATT_AUTH_REQ_NONE
                );
                if (status != 0) {
                    ESP_LOGW("ble_client_lambda", "Writing Ensto1 calibration value %d failed, status=%d", value, status);
                }
# Temperature boost offset written to Ensto just like calibration value, except using range -490..500.
# Device would accept full int16_t range, but using Fan limits us to 99 values (when excluding zero)
  - platform: template
    id: ensto1_temperature_boost_offset_set
    type: float
    write_action:
      - if:
          condition:
            lambda: return true;
          then:
            - lambda: |-
                if (!id(ensto1_connection_state)) {
                    return;
                }
                if (state < 0.01f) {
                    return; // skip uninitialized zero value from Home-assistant when it is restarted etc.
                }
                esphome::ble_client::BLEClient* client = id(ensto1);
                if (!client) {
                    ESP_LOGW("ble_client.write_action", "Ensto1 BLE Client doesn't exist");
                    return;
                }
                // convert state from 0.1..1 to -490..500
                int16_t value = (int16_t)((state * 10.0f - 5.0f) * 100 + 0.5f);
                uint16_t minutes = 60; // hard-coded boost length
                ESP_LOGI("ble_client.write_action", "New boost offset set to %d for %u minutes", value, minutes);
                uint8_t buf[] = {
                    1, // enable
                    (uint8_t)(value & 0xff), (uint8_t)((value >> 8) & 0xff), // int16_t offset
                    0, // boost offset percentage (not used)
                    (uint8_t)(minutes & 0xff), (uint8_t)((minutes >> 8) & 0xff) // uint16_t boost time set point in minutes
                };
                int status = esp_ble_gattc_write_char(
                    client->gattc_if,
                    client->conn_id,
                    0x29, //characteristic: ca3c0685-b708-4cd4-a049-5badd10469e7
                    sizeof(buf),
                    buf,
                    ESP_GATT_WRITE_TYPE_RSP,
                    ESP_GATT_AUTH_REQ_NONE
                );
                if (status != 0) {
                    ESP_LOGW("ble_client_lambda", "Writing Ensto1 boost offset %d failed, status=%d", value, status);
                }

fan:
  - platform: speed
    output: ensto1_temperature_calibration_set
    name: "Ensto1 temperature calibration set"
  - platform: speed
    output: ensto1_temperature_boost_offset_set
    name: "Ensto1 temperature boost offset set"
